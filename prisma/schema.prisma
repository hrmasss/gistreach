generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  ownedWorkspaces Workspace[]       @relation("WorkspaceOwner")
  workspaceMember WorkspaceMember[]
  subscription    Subscription?
  createdContent  Content[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  ownerId        String
  subscriptionId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner          User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])
  members        WorkspaceMember[]
  socialAccounts SocialAccount[]
  content        Content[]
  campaigns      Campaign[]

  @@index([ownerId])
  @@index([slug])
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        String   @default("member") // 'owner', 'admin', 'member', 'viewer'
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  planId               String // 'free', 'pro', 'enterprise'
  status               String // 'active', 'cancelled', 'past_due', 'trialing'
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  limits               Json // Plan-specific limits (posts/month, accounts, etc.)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaces Workspace[]

  @@unique([userId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model SocialAccount {
  id                    String    @id @default(cuid())
  workspaceId           String
  platform              String // 'facebook', 'x', 'linkedin'
  accountType           String // 'personal', 'business', 'page'
  platformAccountId     String
  displayName           String
  encryptedAccessToken  String
  encryptedRefreshToken String?
  tokenExpiresAt        DateTime?
  isActive              Boolean   @default(true)
  permissions           Json // Array of granted permissions
  platformMetadata      Json // Platform-specific data
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  publishedPosts PublishedPost[]

  @@unique([workspaceId, platform, platformAccountId])
  @@index([workspaceId, platform])
}

model Content {
  id                String   @id @default(cuid())
  workspaceId       String
  createdById       String
  type              String // 'text', 'image', 'video'
  title             String
  rawContent        String
  aiEnhancedContent String?
  mediaAssets       Json? // Array of media asset references
  status            String   @default("draft") // 'draft', 'ready', 'published'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy      User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  publishedPosts PublishedPost[]

  @@index([workspaceId, status])
  @@index([createdById])
  @@index([createdAt])
}

model PublishedPost {
  id                       String    @id @default(cuid())
  contentId                String
  socialAccountId          String
  platformPostId           String
  platform                 String
  platformOptimizedContent Json // Platform-specific optimized content
  publishedAt              DateTime?
  scheduledFor             DateTime?
  status                   String    @default("pending") // 'pending', 'published', 'failed', 'cancelled'
  errorMessage             String?
  retryCount               Int       @default(0)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  content       Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  analytics     Analytics[]

  @@unique([socialAccountId, platformPostId])
  @@index([status, scheduledFor])
  @@index([contentId])
}

model Analytics {
  id               String   @id @default(cuid())
  publishedPostId  String
  collectedAt      DateTime
  likes            Int      @default(0)
  shares           Int      @default(0)
  comments         Int      @default(0)
  views            Int      @default(0)
  impressions      Int      @default(0)
  platformSpecific Json // Platform-specific metrics
  createdAt        DateTime @default(now())

  publishedPost PublishedPost @relation(fields: [publishedPostId], references: [id], onDelete: Cascade)

  @@unique([publishedPostId, collectedAt])
  @@index([publishedPostId, collectedAt])
}

model Campaign {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String   @default("draft") // 'draft', 'active', 'paused', 'completed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, status])
  @@index([startDate, endDate])
}
